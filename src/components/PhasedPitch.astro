---
interface Props {
  formation: string;
  allPlayers: Array<{name: string; jersey?: string}>;
  startingPlayers: Array<{name: string; pos: string; jersey?: string}>;
  rotatingPlayers: Array<{name: string; jersey?: string}>;
  captains: {first_half: string; second_half: string};
  goalkeepers: {first_half: string; second_half: string};
  phase: 'initial' | 'captains' | 'lineup';
}

const { formation, allPlayers, startingPlayers, rotatingPlayers, captains, goalkeepers, phase } = Astro.props;

// Position mapping for 3-3-1 formation (corrected positioning)
const positionMap = {
  'GK': { x: 50, y: 85 },
  'LB': { x: 25, y: 65 }, // Left Back
  'CB': { x: 50, y: 65 }, // Center Back  
  'RB': { x: 75, y: 65 }, // Right Back
  'LM': { x: 20, y: 40 }, // Left Mid
  'CM': { x: 50, y: 40 }, // Center Mid
  'RM': { x: 80, y: 40 }, // Right Mid
  'ST': { x: 50, y: 20 }  // Striker
};

// Helper: get position for any player based on their actual position
const getPositionForPlayer = (player) => {
  return positionMap[player.pos] || { x: 50, y: 50 };
};

// Build static formation slots when we are in 'captains' phase (no lineup reveal)
const getFormationSlots = () => {
  if (formation === '3-3-1') {
    return [
      { pos: 'GK' },
      { pos: 'LB' }, // Left Back
      { pos: 'CB' }, // Center Back
      { pos: 'RB' }, // Right Back
      { pos: 'LM' }, // Left Mid
      { pos: 'CM' }, // Center Mid
      { pos: 'RM' }, // Right Mid
      { pos: 'ST' }  // Striker
    ];
  }
  // default: single markers
  return [{ pos: 'GK' }, { pos: 'CB' }, { pos: 'LM' }, { pos: 'CM' }, { pos: 'RM' }, { pos: 'ST' }];
};

const getSlotPosition = (slot) => {
  return positionMap[slot.pos] || { x: 50, y: 50 };
};
---

<div class="phased-pitch-container">
  <div class="pitch-section">
    <!-- Left side - Formation positions -->
    <div class="formation-side">
      <h4>Formation Positions</h4>
  <svg viewBox="0 0 100 100" class="soccer-pitch" aria-label="Soccer field formation">
        <!-- Field background with gradient -->
        <defs>
          <radialGradient id="fieldGradient" cx="50%" cy="50%" r="70%">
            <stop offset="0%" style="stop-color:#66bb6a;stop-opacity:1" />
            <stop offset="50%" style="stop-color:#4caf50;stop-opacity:1" />
            <stop offset="100%" style="stop-color:#388e3c;stop-opacity:1" />
          </radialGradient>
          <filter id="fieldShadow">
            <feDropShadow dx="0" dy="2" stdDeviation="2" flood-color="#000000" flood-opacity="0.3"/>
          </filter>
          <pattern id="grass" patternUnits="userSpaceOnUse" width="4" height="4">
            <rect width="4" height="4" fill="#4caf50"/>
            <rect width="2" height="4" fill="#66bb6a" opacity="0.3"/>
          </pattern>
        </defs>
        
        <!-- Main field -->
        <rect x="3" y="3" width="94" height="94" fill="url(#fieldGradient)" stroke="#ffffff" stroke-width="0.8" rx="3" filter="url(#fieldShadow)"/>
        
        <!-- Field lines -->
        <!-- Center circle -->
        <circle cx="50" cy="50" r="10" fill="none" stroke="#ffffff" stroke-width="0.8" opacity="0.9"/>
        <circle cx="50" cy="50" r="1.5" fill="#ffffff" opacity="0.9"/>
        
        <!-- Penalty boxes (larger and more realistic) -->
        <rect x="3" y="75" width="94" height="22" fill="none" stroke="#ffffff" stroke-width="0.8" opacity="0.9"/>
        <rect x="3" y="3" width="94" height="22" fill="none" stroke="#ffffff" stroke-width="0.8" opacity="0.9"/>
        
        <!-- Goal boxes -->
        <rect x="33" y="85" width="34" height="12" fill="none" stroke="#ffffff" stroke-width="0.8" opacity="0.9"/>
        <rect x="33" y="3" width="34" height="12" fill="none" stroke="#ffffff" stroke-width="0.8" opacity="0.9"/>
        
        <!-- Goals -->
        <rect x="43" y="95" width="14" height="5" fill="none" stroke="#ffffff" stroke-width="0.6" opacity="0.8"/>
        <rect x="43" y="0" width="14" height="5" fill="none" stroke="#ffffff" stroke-width="0.6" opacity="0.8"/>
        
        <!-- Center line -->
        <line x1="3" y1="50" x2="97" y2="50" stroke="#ffffff" stroke-width="0.8" opacity="0.9"/>
        
        <!-- Corner arcs -->
        <path d="M 3 3 A 3 3 0 0 1 6 3 A 3 3 0 0 1 3 6" fill="none" stroke="#ffffff" stroke-width="0.6" opacity="0.7"/>
        <path d="M 97 3 A 3 3 0 0 0 94 3 A 3 3 0 0 0 97 6" fill="none" stroke="#ffffff" stroke-width="0.6" opacity="0.7"/>
        <path d="M 3 97 A 3 3 0 0 0 6 97 A 3 3 0 0 0 3 94" fill="none" stroke="#ffffff" stroke-width="0.6" opacity="0.7"/>
        <path d="M 97 97 A 3 3 0 0 1 94 97 A 3 3 0 0 1 97 94" fill="none" stroke="#ffffff" stroke-width="0.6" opacity="0.7"/>

        <!-- Position slots and players based on phase -->
        {phase === 'captains' && (
          getFormationSlots().map((slot) => {
            const pos = getSlotPosition(slot);
            return (
              <g class="player-position">
                <circle cx={pos.x} cy={pos.y} r="6" fill="#e0e0e0" stroke="#ffffff" stroke-width="1.4" />
                <circle cx={pos.x} cy={pos.y} r="4.8" fill="#f5f5f5" stroke="#bdbdbd" stroke-width="0.8" />
                <text x={pos.x} y={pos.y + 1.4} text-anchor="middle" fill="#424242" font-size="2.2" font-weight="bold">
                  {slot.pos}
                </text>
              </g>
            );
          })
        )}

        {phase === 'lineup' && (
          startingPlayers.map((player, index) => {
            const pos = getPositionForPlayer(player);
            const isCaptain = player.name === captains.first_half || player.name === captains.second_half;
            const isGK = player.pos === 'GK';
            const captainRole = isCaptain ? (player.name === captains.first_half ? "1st Half Captain" : "2nd Half Captain") : null;
            const playerId = `player-${player.jersey || index}`;
            
            return (
              <g class="player-position lineup-revealed" data-player-id={playerId}>
                {/* Player circle with position-based colors */}
                <circle 
                  cx={pos.x} cy={pos.y} r="6.5" 
                  fill={isGK ? "#ff5722" : "#1976d2"} 
                  stroke="#ffffff" stroke-width="1.8" 
                  class="player-circle clickable"
                  data-player-name={player.name}
                  data-player-jersey={player.jersey}
                  data-player-pos={player.pos}
                  data-captain-role={captainRole}
                  style="cursor: pointer; transition: all 0.2s ease;"
                />
                <circle 
                  cx={pos.x} cy={pos.y} r="5.2" 
                  fill={isGK ? "#ff7043" : "#1e88e5"} 
                  stroke="#ffffff" stroke-width="0.6" 
                  class="player-inner-circle clickable"
                  data-player-name={player.name}
                  data-player-jersey={player.jersey}
                  data-player-pos={player.pos}
                  data-captain-role={captainRole}
                  style="cursor: pointer; transition: all 0.2s ease;"
                />
                
                {/* Captain armband - more prominent */}
                {isCaptain && (
                  <>
                    <rect x={pos.x - 3} y={pos.y - 7.5} width="6" height="2.5" fill="#ffd700" stroke="#ff8f00" stroke-width="0.4" rx="0.4"/>
                    <text x={pos.x} y={pos.y - 6.2} text-anchor="middle" fill="#1565c0" font-size="1.2" font-weight="bold">C</text>
                  </>
                )}
                
                {/* Jersey number */}
                <text 
                  x={pos.x} y={pos.y + 1.2} 
                  text-anchor="middle" fill="white" 
                  font-size="2.4" font-weight="bold"
                  class="clickable"
                  data-player-name={player.name}
                  data-player-jersey={player.jersey}
                  data-player-pos={player.pos}
                  data-captain-role={captainRole}
                  style="cursor: pointer;"
                >
                  #{player.jersey}
                </text>
                
                {/* Player name below - closer to player */}
                <text x={pos.x} y={pos.y + 10} text-anchor="middle" fill="#ffffff" font-size="2.2" font-weight="800" class="player-name-text">
                  {player.name.split(' ')[0]}
                </text>
                <text x={pos.x} y={pos.y + 12.5} text-anchor="middle" fill="#e8f5e8" font-size="1.8" font-weight="700" class="player-pos-text">
                  {player.pos}
                </text>
              </g>
            );
          })
        )}
      </svg>

      {/* Captain info now displayed below in the right panel for better visual hierarchy */}

      {/* Player Details Popup */}
      <div id="playerPopup" class="player-popup" style="display: none;">
        <div class="popup-content">
          <div class="popup-header">
            <span class="popup-close">&times;</span>
          </div>
          <div class="popup-body">
            <div class="popup-jersey" id="popupJersey">#13</div>
            <div class="popup-name" id="popupName">Player Name</div>
            <div class="popup-position" id="popupPosition">Position</div>
            <div class="popup-role" id="popupRole" style="display: none;">Captain Role</div>
          </div>
        </div>
      </div>
    </div>

    <!-- Right side - Player pool -->
    <div class="player-pool-side">
      <h4>
        {phase === 'initial' && 'Squad for This Week'}
        {phase === 'captains' && 'Available Players'}
        {phase === 'lineup' && 'Rotating Squad'}
      </h4>
      
      <div class="player-showcase">
        {phase === 'initial' && (
          <div class="squad-grid">
            <div class="squad-stats">
              <div class="stat-item">
                <span class="stat-number">{allPlayers.length}</span>
                <span class="stat-label">Players</span>
              </div>
              <div class="stat-item">
                <span class="stat-number">8</span>
                <span class="stat-label">Starting</span>
              </div>
              <div class="stat-item">
                <span class="stat-number">{allPlayers.length - 8}</span>
                <span class="stat-label">Rotating</span>
              </div>
            </div>
            
            <div class="players-grid">
              {allPlayers.map((player) => (
                <div class="player-card squad">
                  <div class="player-avatar">
                    <span class="player-initial">{player.name.split(' ')[0].charAt(0)}</span>
                  </div>
                  <div class="player-info">
                    <span class="player-name">{player.name.split(' ')[0]}</span>
                    <span class="player-jersey">#{player.jersey || 'TBD'}</span>
                  </div>
                  <div class="player-status">
                    <div class="status-dot available"></div>
                  </div>
                </div>
              ))}
            </div>
            
            <div class="squad-note">
              <p>All players eligible for selection • Rotation ensures fair play time</p>
            </div>
          </div>
        )}
        
        {phase === 'captains' && (
          <div class="captains-highlight">
            <div class="leadership-panel">
              <div class="leader-card captain">
                <div class="leader-icon">🏅</div>
                <div class="leader-info">
                  <h5>Captains</h5>
                  <p>{captains.first_half} (1st) • {captains.second_half} (2nd)</p>
                </div>
              </div>
              
              <div class="leader-card goalkeeper">
                <div class="leader-icon">🥅</div>
                <div class="leader-info">
                  <h5>Goalkeepers</h5>
                  <p>{goalkeepers.first_half} (Goal) • {goalkeepers.second_half} (Field)</p>
                </div>
              </div>
            </div>
            
            <div class="available-grid">
              {allPlayers.filter(p => 
                p.name !== captains.first_half && 
                p.name !== captains.second_half && 
                p.name !== goalkeepers.first_half && 
                p.name !== goalkeepers.second_half
              ).map((player) => (
                <div class="player-card available">
                  <div class="player-avatar">
                    <span class="player-initial">{player.name.split(' ')[0].charAt(0)}</span>
                  </div>
                  <div class="player-info">
                    <span class="player-name">{player.name.split(' ')[0]}</span>
                    <span class="player-jersey">#{player.jersey || 'TBD'}</span>
                  </div>
                </div>
              ))}
            </div>
          </div>
        )}
        
        {phase === 'lineup' && (
          <div class="lineup-revealed">
            <div class="rotating-grid">
              {rotatingPlayers.map((player) => (
                <div class="player-card rotating">
                  <div class="player-avatar">
                    <span class="player-initial">{player.name.split(' ')[0].charAt(0)}</span>
                  </div>
                  <div class="player-info">
                    <span class="player-name">{player.name.split(' ')[0]}</span>
                    <span class="player-jersey">#{player.jersey || 'TBD'}</span>
                    <span class="player-position">{player.pos}</span>
                  </div>
                  <div class="rotation-indicator">
                    <div class="rotation-arrow">↻</div>
                  </div>
                </div>
              ))}
            </div>
            
            <div class="rotation-note">
              <p>Rotating players will sub in throughout the match</p>
            </div>

            {/* Captain and GK info for lineup phase */}
            <div class="captains-lineup-info">
              <div class="leadership-panel-compact">
                <div class="leader-card-compact captain">
                  <div class="leader-icon">🏅</div>
                  <div class="leader-info-compact">
                    <h5>Match Captains</h5>
                    <p><strong>1st Half:</strong> {captains.first_half}<br><strong>2nd Half:</strong> {captains.second_half}</p>
                  </div>
                </div>
                
                <div class="leader-card-compact goalkeeper">
                  <div class="leader-icon">🥅</div>
                  <div class="leader-info-compact">
                    <h5>Goalkeeper Rotation</h5>
                    <p><strong>1st Half:</strong> {goalkeepers.first_half} (goal)<br><strong>2nd Half:</strong> {goalkeepers.second_half} (goal)</p>
                  </div>
                </div>
              </div>
            </div>
          </div>
        )}
      </div>
    </div>
  </div>
</div>

<style>
  .phased-pitch-container {
    width: 100%;
    margin: var(--spacing-lg) 0;
    max-width: 1200px;
    margin-left: auto;
    margin-right: auto;
  }

  .pitch-section {
    display: grid;
    grid-template-columns: 1.2fr 1fr;
    gap: var(--spacing-xl);
    align-items: start;
  }

  .formation-side h4,
  .player-pool-side h4 {
    text-align: center;
    margin-bottom: var(--spacing-md);
    color: var(--color-primary);
    font-weight: 600;
    font-size: 1.1rem;
  }

  .soccer-pitch {
    width: 100%;
    max-width: 500px;
    height: auto;
    margin: 0 auto;
    display: block;
    border-radius: 12px;
    box-shadow: 0 8px 32px rgba(0,0,0,0.15);
    background: linear-gradient(135deg, #388e3c 0%, #2e7d32 100%);
    transition: transform 0.3s ease, box-shadow 0.3s ease;
  }

  .soccer-pitch:hover {
    transform: translateY(-2px);
    box-shadow: 0 12px 40px rgba(0,0,0,0.2);
  }

  .player-name-text {
    filter: drop-shadow(0 2px 4px rgba(0,0,0,0.8)) drop-shadow(0 0 2px rgba(0,0,0,0.6));
    font-family: system-ui, -apple-system, sans-serif;
  }

  .player-pos-text {
    filter: drop-shadow(0 1px 3px rgba(0,0,0,0.7)) drop-shadow(0 0 1px rgba(0,0,0,0.5));
    font-family: system-ui, -apple-system, sans-serif;
  }

  .lineup-revealed {
    animation: playerAppear 0.8s cubic-bezier(0.34, 1.56, 0.64, 1);
  }

  @keyframes playerAppear {
    0% {
      opacity: 0;
      transform: scale(0.3) translateY(-10px);
    }
    50% {
      opacity: 0.8;
      transform: scale(1.1) translateY(-2px);
    }
    100% {
      opacity: 1;
      transform: scale(1) translateY(0);
    }
  }

  /* Player interaction effects */
  .player-circle:hover,
  .player-inner-circle:hover {
    transform: scale(1.1);
    filter: drop-shadow(0 0 8px rgba(255, 255, 255, 0.8));
  }

  .clickable {
    cursor: pointer !important;
  }

  /* Player Popup Styles */
  .player-popup {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0, 0, 0, 0.6);
    backdrop-filter: blur(4px);
    z-index: 1000;
    display: flex;
    align-items: center;
    justify-content: center;
    animation: popupFadeIn 0.3s ease;
  }

  .popup-content {
    background: linear-gradient(135deg, #ffffff 0%, #f8f9fa 100%);
    border-radius: 16px;
    padding: 0;
    max-width: 280px;
    width: 90%;
    box-shadow: 0 20px 60px rgba(0, 0, 0, 0.3);
    border: 2px solid rgba(25, 118, 210, 0.2);
    overflow: hidden;
    animation: popupSlideIn 0.4s cubic-bezier(0.34, 1.56, 0.64, 1);
  }

  .popup-header {
    background: linear-gradient(135deg, #1976d2 0%, #1565c0 100%);
    padding: 12px 16px;
    display: flex;
    justify-content: flex-end;
    align-items: center;
  }

  .popup-close {
    color: white;
    font-size: 24px;
    font-weight: bold;
    cursor: pointer;
    padding: 4px;
    border-radius: 4px;
    transition: background 0.2s;
  }

  .popup-close:hover {
    background: rgba(255, 255, 255, 0.2);
  }

  .popup-body {
    padding: 24px;
    text-align: center;
  }

  .popup-jersey {
    font-size: 3rem;
    font-weight: 800;
    color: #1976d2;
    margin-bottom: 8px;
    text-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  }

  .popup-name {
    font-size: 1.5rem;
    font-weight: 700;
    color: #1565c0;
    margin-bottom: 8px;
  }

  .popup-position {
    font-size: 1.1rem;
    font-weight: 600;
    color: #666;
    background: linear-gradient(135deg, #e3f2fd 0%, #f8fbff 100%);
    padding: 8px 16px;
    border-radius: 20px;
    display: inline-block;
    margin-bottom: 12px;
    border: 1px solid rgba(25, 118, 210, 0.2);
  }

  .popup-role {
    font-size: 0.95rem;
    font-weight: 700;
    color: #ff8f00;
    background: linear-gradient(135deg, #fff8e1 0%, #ffecb3 100%);
    padding: 6px 12px;
    border-radius: 16px;
    display: inline-block;
    border: 1px solid rgba(255, 143, 0, 0.3);
  }

  @keyframes popupFadeIn {
    from { opacity: 0; }
    to { opacity: 1; }
  }

  @keyframes popupSlideIn {
    0% {
      opacity: 0;
      transform: scale(0.7) translateY(-20px);
    }
    100% {
      opacity: 1;
      transform: scale(1) translateY(0);
    }
  }

  .reveal-panel {
    margin-top: var(--spacing-md);
    font-size: 0.95rem;
    background: linear-gradient(135deg, rgba(25,118,210,0.08) 0%, rgba(25,118,210,0.12) 100%);
    border: 2px solid rgba(25,118,210,0.2);
    border-radius: 12px;
    padding: var(--spacing-md) var(--spacing-lg);
    backdrop-filter: blur(10px);
    box-shadow: 0 4px 16px rgba(25,118,210,0.1);
  }

  .player-showcase {
    background: white;
    border-radius: 12px;
    padding: var(--spacing-lg);
    box-shadow: 0 4px 16px rgba(0,0,0,0.1);
    border: 1px solid rgba(0,0,0,0.08);
  }

  /* Squad Grid Layout (Initial Phase) */
  .squad-stats {
    display: flex;
    justify-content: space-around;
    margin-bottom: var(--spacing-lg);
    padding: var(--spacing-md);
    background: linear-gradient(135deg, #e3f2fd 0%, #bbdefb 100%);
    border-radius: 8px;
  }

  .stat-item {
    text-align: center;
  }

  .stat-number {
    display: block;
    font-size: 1.8rem;
    font-weight: 700;
    color: var(--color-primary);
  }

  .stat-label {
    font-size: 0.8rem;
    color: var(--color-text-light);
    text-transform: uppercase;
    letter-spacing: 0.5px;
  }

  .players-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(140px, 1fr));
    gap: var(--spacing-sm);
    margin-bottom: var(--spacing-md);
  }

  .player-card {
    display: flex;
    align-items: center;
    gap: var(--spacing-sm);
    padding: var(--spacing-sm);
    border-radius: 8px;
    transition: all 0.2s ease;
    position: relative;
  }

  .player-card.squad {
    background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
    border: 1px solid rgba(0,0,0,0.1);
  }

  .player-card.available {
    background: linear-gradient(135deg, #e8f5e8 0%, #c8e6c9 100%);
    border: 1px solid rgba(76,175,80,0.3);
  }

  .player-card.rotating {
    background: linear-gradient(135deg, #fff3e0 0%, #ffe0b2 100%);
    border: 1px solid rgba(255,152,0,0.3);
  }

  .player-card:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(0,0,0,0.15);
  }

  .player-avatar {
    width: 32px;
    height: 32px;
    border-radius: 50%;
    background: linear-gradient(135deg, var(--color-primary) 0%, #1565c0 100%);
    display: flex;
    align-items: center;
    justify-content: center;
    flex-shrink: 0;
  }

  .player-initial {
    color: white;
    font-weight: 700;
    font-size: 0.9rem;
  }

  .player-info {
    flex: 1;
    display: flex;
    flex-direction: column;
    gap: 2px;
  }

  .player-name {
    font-weight: 600;
    font-size: 0.9rem;
    color: var(--color-text);
  }

  .player-jersey {
    font-size: 0.75rem;
    color: var(--color-text-light);
    font-weight: 500;
  }

  .player-position {
    font-size: 0.7rem;
    color: var(--color-primary);
    font-weight: 600;
    background: rgba(25, 118, 210, 0.1);
    padding: 2px 6px;
    border-radius: 4px;
    border: 1px solid rgba(25, 118, 210, 0.2);
  }

  .player-status {
    display: flex;
    align-items: center;
  }

  .status-dot {
    width: 8px;
    height: 8px;
    border-radius: 50%;
  }

  .status-dot.available {
    background: #4caf50;
    box-shadow: 0 0 0 2px rgba(76,175,80,0.3);
  }

  .squad-note {
    text-align: center;
    padding: var(--spacing-sm);
    background: rgba(25,118,210,0.08);
    border-radius: 6px;
    font-size: 0.85rem;
    color: var(--color-text-light);
  }

  /* Captains Phase Layout */
  .leadership-panel {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: var(--spacing-md);
    margin-bottom: var(--spacing-lg);
  }

  .leader-card {
    display: flex;
    align-items: center;
    gap: var(--spacing-sm);
    padding: var(--spacing-md);
    border-radius: 8px;
    border: 2px solid;
  }

  .leader-card.captain {
    background: linear-gradient(135deg, #fff8e1 0%, #ffecb3 100%);
    border-color: #ff9800;
  }

  .leader-card.goalkeeper {
    background: linear-gradient(135deg, #e3f2fd 0%, #bbdefb 100%);
    border-color: #1976d2;
  }

  .leader-icon {
    font-size: 1.5rem;
    flex-shrink: 0;
  }

  .leader-info h5 {
    margin: 0 0 4px 0;
    font-size: 0.9rem;
    font-weight: 600;
    color: var(--color-text);
  }

  .leader-info p {
    margin: 0;
    font-size: 0.8rem;
    color: var(--color-text-light);
    font-weight: 500;
  }

  .available-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(130px, 1fr));
    gap: var(--spacing-sm);
  }

  /* Lineup Phase Layout */
  .rotating-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(140px, 1fr));
    gap: var(--spacing-sm);
    margin-bottom: var(--spacing-md);
  }

  .rotation-indicator {
    display: flex;
    align-items: center;
  }

  .rotation-arrow {
    font-size: 1.2rem;
    color: #ff9800;
    animation: spin 3s linear infinite;
  }

  .rotation-note {
    text-align: center;
    padding: var(--spacing-sm);
    background: rgba(255,152,0,0.1);
    border-radius: 6px;
    font-size: 0.85rem;
    color: var(--color-text-light);
    margin-bottom: var(--spacing-lg);
  }

  /* Compact captain info for lineup phase */
  .captains-lineup-info {
    margin-top: var(--spacing-lg);
  }

  .leadership-panel-compact {
    display: flex;
    flex-direction: column;
    gap: var(--spacing-md);
  }

  .leader-card-compact {
    display: flex;
    align-items: center;
    gap: var(--spacing-sm);
    padding: var(--spacing-sm) var(--spacing-md);
    border-radius: 10px;
    border: 2px solid;
    background: linear-gradient(135deg, rgba(255, 255, 255, 0.9) 0%, rgba(248, 249, 250, 0.9) 100%);
  }

  .leader-card-compact.captain {
    border-color: #ff9800;
    background: linear-gradient(135deg, rgba(255, 248, 225, 0.9) 0%, rgba(255, 236, 179, 0.9) 100%);
  }

  .leader-card-compact.goalkeeper {
    border-color: #1976d2;
    background: linear-gradient(135deg, rgba(227, 242, 253, 0.9) 0%, rgba(187, 222, 251, 0.9) 100%);
  }

  .leader-info-compact h5 {
    margin: 0 0 4px 0;
    font-size: 0.9rem;
    font-weight: 700;
    color: var(--color-text);
  }

  .leader-info-compact p {
    margin: 0;
    font-size: 0.8rem;
    color: var(--color-text-light);
    font-weight: 500;
    line-height: 1.3;
  }

  @keyframes spin {
    from { transform: rotate(0deg); }
    to { transform: rotate(360deg); }
  }

  @media (max-width: 768px) {
    .pitch-section {
      grid-template-columns: 1fr;
      gap: var(--spacing-lg);
    }
    
    .soccer-pitch {
      max-width: 100%;
      margin-bottom: var(--spacing-md);
    }
    
    .players-grid,
    .available-grid,
    .rotating-grid {
      grid-template-columns: repeat(auto-fit, minmax(110px, 1fr));
      gap: var(--spacing-xs);
    }
    
    .leadership-panel {
      grid-template-columns: 1fr;
      gap: var(--spacing-sm);
    }

    .leadership-panel-compact {
      gap: var(--spacing-sm);
    }
    
    .squad-stats {
      flex-direction: row;
      justify-content: space-between;
      padding: var(--spacing-sm);
    }
    
    .stat-number {
      font-size: 1.5rem;
    }
    
    .player-card {
      padding: var(--spacing-xs);
      gap: var(--spacing-xs);
    }
    
    .player-avatar {
      width: 28px;
      height: 28px;
    }
    
    .player-initial {
      font-size: 0.8rem;
    }
    
    .player-name {
      font-size: 0.85rem;
    }
    
    .player-jersey {
      font-size: 0.7rem;
    }
  }

  @media (max-width: 480px) {
    .phased-pitch-container {
      margin: var(--spacing-md) 0;
    }
    
    .pitch-section {
      gap: var(--spacing-md);
    }
    
    .formation-side h4,
    .player-pool-side h4 {
      font-size: 1rem;
      margin-bottom: var(--spacing-sm);
    }
    
    .player-showcase {
      padding: var(--spacing-md);
    }
    
    .players-grid,
    .available-grid,
    .rotating-grid {
      grid-template-columns: repeat(2, 1fr);
    }
    
    .squad-stats {
      flex-direction: column;
      gap: var(--spacing-xs);
      text-align: center;
    }
    
    .reveal-panel {
      padding: var(--spacing-sm);
      font-size: 0.85rem;
    }
  }

  @media (prefers-reduced-motion: reduce) {
    .rotation-arrow {
      animation: none;
    }
    
    .player-card:hover,
    .soccer-pitch:hover {
      transform: none;
    }
    
    .lineup-revealed {
      animation: none;
    }
  }

  /* Enhanced accessibility */
  @media (prefers-contrast: high) {
    .soccer-pitch {
      filter: contrast(1.2);
    }
    
    .player-card {
      border-width: 2px;
    }
  }

  /* Print styles */
  @media print {
    .soccer-pitch {
      break-inside: avoid;
      box-shadow: none;
    }
    
    .phased-pitch-container {
      page-break-inside: avoid;
    }
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    const popup = document.getElementById('playerPopup');
    const popupClose = document.querySelector('.popup-close');
    const clickableElements = document.querySelectorAll('.clickable');

    function showPlayerPopup(playerData) {
      const popupJersey = document.getElementById('popupJersey');
      const popupName = document.getElementById('popupName');
      const popupPosition = document.getElementById('popupPosition');
      const popupRole = document.getElementById('popupRole');

      if (popupJersey) popupJersey.textContent = `#${playerData.jersey}`;
      if (popupName) popupName.textContent = playerData.name;
      if (popupPosition) popupPosition.textContent = playerData.pos;
      
      if (playerData.captainRole && popupRole) {
        popupRole.textContent = playerData.captainRole;
        popupRole.style.display = 'inline-block';
      } else if (popupRole) {
        popupRole.style.display = 'none';
      }

      if (popup) {
        popup.style.display = 'flex';
        document.body.style.overflow = 'hidden';
      }
    }

    function hidePlayerPopup() {
      if (popup) {
        popup.style.display = 'none';
        document.body.style.overflow = 'auto';
      }
    }

    // Add click/touch event listeners to clickable elements
    clickableElements.forEach(element => {
      element.addEventListener('click', function(e) {
        e.preventDefault();
        e.stopPropagation();
        
        const playerData = {
          name: this.getAttribute('data-player-name'),
          jersey: this.getAttribute('data-player-jersey'),
          pos: this.getAttribute('data-player-pos'),
          captainRole: this.getAttribute('data-captain-role')
        };

        if (playerData.name) {
          showPlayerPopup(playerData);
        }
      });

      // Add hover effect for desktop
      element.addEventListener('mouseenter', function() {
        if (window.innerWidth > 768) { // Desktop only
          this.style.transform = 'scale(1.05)';
          this.style.filter = 'drop-shadow(0 0 8px rgba(255, 255, 255, 0.6))';
        }
      });

      element.addEventListener('mouseleave', function() {
        if (window.innerWidth > 768) { // Desktop only
          this.style.transform = 'scale(1)';
          this.style.filter = 'none';
        }
      });
    });

    // Close popup events
    if (popupClose) {
      popupClose.addEventListener('click', hidePlayerPopup);
    }

    if (popup) {
      popup.addEventListener('click', function(e) {
        if (e.target === popup) {
          hidePlayerPopup();
        }
      });
    }

    // Close popup with Escape key
    document.addEventListener('keydown', function(e) {
      if (e.key === 'Escape') {
        hidePlayerPopup();
      }
    });
  });
</script>
