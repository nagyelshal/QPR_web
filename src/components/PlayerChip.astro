---
interface Props {
  name: string;
  position: string;
  jersey?: string;
  isRevealed: boolean;
  onClick?: () => void;
  linkToProfile?: boolean;
}

const { name, position, jersey, isRevealed, onClick, linkToProfile = true } = Astro.props;
const base = import.meta.env.BASE_URL;

// Convert name to ID for URL
const playerId = name.toLowerCase()
  .replace(/\s+/g, '-')
  .replace(/[^a-z0-9-]/g, '');
---

{isRevealed && linkToProfile ? (
  <a 
    href={`${base}players/${playerId}/`}
    class={`player-chip revealed clickable`}
    data-position={position}
  >
    <div class="jersey-number">{jersey || '?'}</div>
    <div class="player-name">{name}</div>
    <div class="position">{position}</div>
  </a>
) : (
  <div 
    class={`player-chip ${isRevealed ? 'revealed' : 'placeholder'}`}
    data-position={position}
    role={onClick ? "button" : undefined}
    tabindex={onClick ? "0" : undefined}
    onclick={onClick}
  >
    {isRevealed ? (
      <>
        <div class="jersey-number">{jersey || '?'}</div>
        <div class="player-name">{name}</div>
        <div class="position">{position}</div>
      </>
    ) : (
      <div class="placeholder-content">
        <div class="shimmer"></div>
        <div class="position">{position}</div>
      </div>
    )}
  </div>
)}
</div>

<style>
  .player-chip {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    min-width: 60px;
    min-height: 60px;
    padding: 8px;
    border-radius: 50%;
    background: linear-gradient(135deg, #1565c0 0%, #0d47a1 100%);
    color: white;
    font-size: 0.75rem;
    font-weight: 600;
    text-align: center;
    cursor: pointer;
    transition: all 0.3s ease;
    box-shadow: 0 2px 8px rgba(21, 101, 192, 0.3);
    position: relative;
    overflow: hidden;
  }

  .player-chip:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 16px rgba(21, 101, 192, 0.4);
  }

  .player-chip.placeholder {
    background: linear-gradient(135deg, #e0e0e0 0%, #bdbdbd 100%);
    color: #757575;
  }

  .jersey-number {
    font-size: 1rem;
    font-weight: 700;
    line-height: 1;
  }

  .player-name {
    font-size: 0.6rem;
    margin-top: 2px;
    line-height: 1;
  }

  .position {
    font-size: 0.5rem;
    opacity: 0.8;
    margin-top: 1px;
  }

  .placeholder-content {
    display: flex;
    flex-direction: column;
    align-items: center;
    width: 100%;
    height: 100%;
  }

  .shimmer {
    width: 20px;
    height: 20px;
    border-radius: 50%;
    background: linear-gradient(90deg, transparent 0%, rgba(255,255,255,0.3) 50%, transparent 100%);
    animation: shimmer 2s infinite;
  }

  @keyframes shimmer {
    0% { transform: translateX(-100%); }
    100% { transform: translateX(100%); }
  }

  .player-chip.revealed {
    animation: chipReveal 0.6s ease-out;
  }

  .player-chip.clickable {
    text-decoration: none;
    color: inherit;
    cursor: pointer;
    transition: all 0.3s ease;
  }

  .player-chip.clickable:hover {
    transform: translateY(-4px) scale(1.05);
    box-shadow: 0 8px 20px rgba(0,0,0,0.15);
  }

  .player-chip.clickable:active {
    transform: translateY(-2px) scale(1.02);
  }

  .player-chip.clickable .player-name {
    transition: color 0.2s ease;
  }

  .player-chip.clickable:hover .player-name {
    color: var(--color-primary);
    font-weight: 700;
  }

  @keyframes chipReveal {
    0% {
      opacity: 0;
      transform: scale(0.3) rotateY(90deg);
    }
    50% {
      transform: scale(1.1) rotateY(0deg);
    }
    100% {
      opacity: 1;
      transform: scale(1) rotateY(0deg);
    }
  }

  @media (prefers-reduced-motion: reduce) {
    .player-chip {
      transition: none;
    }
    .shimmer {
      animation: none;
    }
    .player-chip.revealed {
      animation: none;
    }
  }
</style>
