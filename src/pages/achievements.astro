---
import BaseLayout from '../layouts/BaseLayout.astro';
import achievementsData from '../../data/achievements.json';
import rosterData from '../../data/roster.json';

const title = "Player Achievements";
const description = "Track player badges, achievements, and progress throughout the season";
---

<BaseLayout title={title} description={description}>
  <div class="container">
    <div class="achievements-header">
      <h1>üèÜ Player Achievements</h1>
      <p>Unlock badges and track your progress throughout the season!</p>
    </div>

    <!-- Achievement Categories -->
    <div class="categories-tabs">
      <button class="tab-btn active" data-category="all">All Achievements</button>
      <button class="tab-btn" data-category="scoring">‚öΩ Scoring</button>
      <button class="tab-btn" data-category="defending">üõ°Ô∏è Defending</button>
      <button class="tab-btn" data-category="teamwork">ü§ù Teamwork</button>
      <button class="tab-btn" data-category="special">‚ú® Special</button>
    </div>

    <!-- Achievements Grid -->
    <div class="achievements-section">
      <h2>üéØ Available Achievements</h2>
      <div class="achievements-grid" id="achievements-grid">
        {Object.entries(achievementsData.achievements).map(([category, achievements]) => 
          achievements.map(achievement => (
            <div class="achievement-card" data-category={category} data-rarity={achievement.rarity}>
              <div class="achievement-icon">{achievement.icon}</div>
              <div class="achievement-content">
                <h3 class="achievement-name">{achievement.name}</h3>
                <p class="achievement-description">{achievement.description}</p>
                <div class="achievement-meta">
                  <span class={`rarity-badge ${achievement.rarity}`}>
                    {achievement.rarity.charAt(0).toUpperCase() + achievement.rarity.slice(1)}
                  </span>
                  <span class="points-badge">{achievement.points} pts</span>
                </div>
              </div>
              <div class="achievement-status">
                <span class="unlock-status">üîí</span>
              </div>
            </div>
          ))
        )}
      </div>
    </div>

    <!-- Player Progress -->
    <div class="players-section">
      <h2>üë• Player Progress</h2>
      <div class="players-grid">
        {rosterData.players.map(player => {
          const playerAchievements = achievementsData.player_achievements[player.name] || { earned: [], total_points: 0 };
          return (
            <div class="player-progress-card">
              <div class="player-header">
                <div class="player-avatar">
                  <img src={`/images/players/${player.name.toLowerCase().replace(/\s+/g, '-').replace(/[^a-z0-9-]/g, '')}.jpg`} 
                       alt={player.name} 
                       onerror="this.src='/images/default-player.jpg'" />
                  <div class="jersey-number">{player.jersey}</div>
                </div>
                <div class="player-info">
                  <h3>{player.name}</h3>
                  <p class="player-position">{player.position}</p>
                  <div class="points-total">
                    <span class="points-number">{playerAchievements.total_points}</span>
                    <span class="points-label">total points</span>
                  </div>
                </div>
              </div>
              
              <div class="earned-badges">
                <h4>Earned Badges ({playerAchievements.earned.length})</h4>
                <div class="badges-list">
                  {playerAchievements.earned.length > 0 ? (
                    playerAchievements.earned.map(achievementId => {
                      const achievement = Object.values(achievementsData.achievements)
                        .flat()
                        .find(a => a.id === achievementId);
                      return achievement ? (
                        <div class="earned-badge" title={achievement.name}>
                          <span class="badge-icon">{achievement.icon}</span>
                          <span class="badge-name">{achievement.name}</span>
                        </div>
                      ) : null;
                    })
                  ) : (
                    <p class="no-badges">No badges earned yet. Keep playing!</p>
                  )}
                </div>
              </div>

              <div class="progress-stats">
                <div class="stat-item">
                  <span class="stat-label">Badges</span>
                  <span class="stat-value">{playerAchievements.earned.length}</span>
                </div>
                <div class="stat-item">
                  <span class="stat-label">Points</span>
                  <span class="stat-value">{playerAchievements.total_points}</span>
                </div>
                <div class="stat-item">
                  <span class="stat-label">Rank</span>
                  <span class="stat-value">#1</span>
                </div>
              </div>
            </div>
          );
        })}
      </div>
    </div>

    <!-- Leaderboard -->
    <div class="leaderboard-section">
      <h2>üèÖ Achievements Leaderboard</h2>
      <div class="leaderboard-grid">
        <div class="leaderboard-header">
          <span>Rank</span>
          <span>Player</span>
          <span>Badges</span>
          <span>Points</span>
        </div>
        {Object.entries(achievementsData.player_achievements)
          .sort(([,a], [,b]) => b.total_points - a.total_points)
          .map(([playerName, data], index) => (
            <div class={`leaderboard-row ${index < 3 ? 'podium' : ''}`}>
              <span class="rank">
                {index === 0 ? 'ü•á' : index === 1 ? 'ü•à' : index === 2 ? 'ü•â' : `#${index + 1}`}
              </span>
              <span class="player-name">{playerName}</span>
              <span class="badges-count">{data.earned.length}</span>
              <span class="points-count">{data.total_points}</span>
            </div>
          ))}
      </div>
    </div>

    <!-- Achievement Ideas Submission -->
    <div class="suggestions-section">
      <h2>üí° Suggest New Achievements</h2>
      <div class="suggestion-form-container">
        <p>Have an idea for a new achievement? Submit it here!</p>
        <form class="suggestion-form">
          <div class="form-row">
            <input type="text" placeholder="Achievement name" required>
            <select required>
              <option value="">Select category</option>
              <option value="scoring">‚öΩ Scoring</option>
              <option value="defending">üõ°Ô∏è Defending</option>
              <option value="teamwork">ü§ù Teamwork</option>
              <option value="special">‚ú® Special</option>
            </select>
          </div>
          <textarea placeholder="Describe what players need to do to earn this achievement..." required></textarea>
          <div class="form-row">
            <input type="text" placeholder="Suggested emoji icon" maxlength="2">
            <select required>
              <option value="">Select rarity</option>
              <option value="common">Common (10-15 pts)</option>
              <option value="uncommon">Uncommon (15-25 pts)</option>
              <option value="rare">Rare (25-40 pts)</option>
              <option value="epic">Epic (40-60 pts)</option>
              <option value="legendary">Legendary (60+ pts)</option>
            </select>
          </div>
          <button type="submit" class="btn btn-primary">Submit Achievement Idea</button>
        </form>
      </div>
    </div>
  </div>
</BaseLayout>

<style>
  .achievements-header {
    text-align: center;
    margin-bottom: var(--spacing-2xl);
  }

  .achievements-header h1 {
    font-size: 3rem;
    background: linear-gradient(135deg, #ff9800 0%, #f57c00 100%);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-clip: text;
    margin-bottom: var(--spacing-md);
  }

  .categories-tabs {
    display: flex;
    justify-content: center;
    gap: var(--spacing-sm);
    margin-bottom: var(--spacing-2xl);
    flex-wrap: wrap;
  }

  .tab-btn {
    background: white;
    border: 2px solid #e0e0e0;
    border-radius: 25px;
    padding: var(--spacing-sm) var(--spacing-lg);
    cursor: pointer;
    font-weight: 600;
    transition: all 0.3s ease;
  }

  .tab-btn:hover {
    border-color: var(--color-primary);
    background: #e3f2fd;
  }

  .tab-btn.active {
    background: var(--color-primary);
    color: white;
    border-color: var(--color-primary);
  }

  .achievements-section,
  .players-section,
  .leaderboard-section,
  .suggestions-section {
    margin-bottom: var(--spacing-2xl);
  }

  .achievements-section h2,
  .players-section h2,
  .leaderboard-section h2,
  .suggestions-section h2 {
    text-align: center;
    margin-bottom: var(--spacing-xl);
    color: var(--color-primary);
  }

  .achievements-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(320px, 1fr));
    gap: var(--spacing-lg);
  }

  .achievement-card {
    background: white;
    border-radius: 16px;
    padding: var(--spacing-xl);
    box-shadow: 0 4px 16px rgba(0, 0, 0, 0.1);
    transition: all 0.3s ease;
    border: 2px solid transparent;
    position: relative;
    opacity: 0.7;
  }

  .achievement-card:hover {
    transform: translateY(-4px);
    box-shadow: 0 8px 24px rgba(0, 0, 0, 0.15);
  }

  .achievement-card.earned {
    opacity: 1;
    border-color: #4caf50;
    background: linear-gradient(135deg, #e8f5e8 0%, #f1f8e9 100%);
  }

  .achievement-icon {
    font-size: 3rem;
    text-align: center;
    margin-bottom: var(--spacing-md);
  }

  .achievement-content {
    text-align: center;
    margin-bottom: var(--spacing-lg);
  }

  .achievement-name {
    font-size: 1.3rem;
    font-weight: 700;
    margin-bottom: var(--spacing-sm);
    color: var(--color-text);
  }

  .achievement-description {
    color: var(--color-text-light);
    line-height: 1.5;
    margin-bottom: var(--spacing-md);
  }

  .achievement-meta {
    display: flex;
    justify-content: center;
    gap: var(--spacing-sm);
  }

  .rarity-badge {
    padding: var(--spacing-xs) var(--spacing-sm);
    border-radius: 12px;
    font-size: 0.8rem;
    font-weight: 600;
    text-transform: uppercase;
  }

  .rarity-badge.common {
    background: #e0e0e0;
    color: #757575;
  }

  .rarity-badge.uncommon {
    background: #c8e6c9;
    color: #2e7d32;
  }

  .rarity-badge.rare {
    background: #bbdefb;
    color: #1565c0;
  }

  .rarity-badge.epic {
    background: #e1bee7;
    color: #7b1fa2;
  }

  .rarity-badge.legendary {
    background: #ffecb3;
    color: #f57f17;
  }

  .points-badge {
    background: var(--color-primary);
    color: white;
    padding: var(--spacing-xs) var(--spacing-sm);
    border-radius: 12px;
    font-size: 0.8rem;
    font-weight: 600;
  }

  .achievement-status {
    text-align: center;
  }

  .unlock-status {
    font-size: 1.5rem;
  }

  .achievement-card.earned .unlock-status {
    display: none;
  }

  .achievement-card.earned::after {
    content: '‚úÖ';
    position: absolute;
    top: var(--spacing-md);
    right: var(--spacing-md);
    font-size: 1.5rem;
  }

  .players-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(350px, 1fr));
    gap: var(--spacing-lg);
  }

  .player-progress-card {
    background: white;
    border-radius: 16px;
    padding: var(--spacing-xl);
    box-shadow: 0 4px 16px rgba(0, 0, 0, 0.1);
    transition: transform 0.3s ease;
  }

  .player-progress-card:hover {
    transform: translateY(-4px);
  }

  .player-header {
    display: flex;
    align-items: center;
    gap: var(--spacing-lg);
    margin-bottom: var(--spacing-lg);
    padding-bottom: var(--spacing-lg);
    border-bottom: 2px solid #f0f0f0;
  }

  .player-avatar {
    position: relative;
    width: 80px;
    height: 80px;
  }

  .player-avatar img {
    width: 100%;
    height: 100%;
    border-radius: 50%;
    object-fit: cover;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
  }

  .jersey-number {
    position: absolute;
    top: -8px;
    right: -8px;
    background: var(--color-primary);
    color: white;
    width: 30px;
    height: 30px;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    font-weight: 700;
    font-size: 0.9rem;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.2);
  }

  .player-info h3 {
    margin: 0 0 var(--spacing-xs) 0;
    font-size: 1.3rem;
    color: var(--color-text);
  }

  .player-position {
    margin: 0 0 var(--spacing-sm) 0;
    color: var(--color-text-light);
    font-weight: 500;
  }

  .points-total {
    display: flex;
    align-items: baseline;
    gap: var(--spacing-xs);
  }

  .points-number {
    font-size: 1.5rem;
    font-weight: 700;
    color: var(--color-primary);
  }

  .points-label {
    font-size: 0.9rem;
    color: var(--color-text-light);
  }

  .earned-badges h4 {
    margin-bottom: var(--spacing-md);
    color: var(--color-primary);
    font-size: 1.1rem;
  }

  .badges-list {
    display: flex;
    flex-wrap: wrap;
    gap: var(--spacing-sm);
    margin-bottom: var(--spacing-lg);
  }

  .earned-badge {
    display: flex;
    align-items: center;
    gap: var(--spacing-xs);
    background: linear-gradient(135deg, #e8f5e8 0%, #c8e6c9 100%);
    padding: var(--spacing-xs) var(--spacing-sm);
    border-radius: 20px;
    font-size: 0.8rem;
    font-weight: 600;
    color: #2e7d32;
  }

  .badge-icon {
    font-size: 1rem;
  }

  .no-badges {
    color: var(--color-text-light);
    font-style: italic;
    margin: 0;
  }

  .progress-stats {
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    gap: var(--spacing-md);
  }

  .stat-item {
    text-align: center;
    padding: var(--spacing-md);
    background: #f8f9fa;
    border-radius: 8px;
  }

  .stat-label {
    display: block;
    font-size: 0.8rem;
    color: var(--color-text-light);
    margin-bottom: var(--spacing-xs);
    text-transform: uppercase;
    font-weight: 600;
  }

  .stat-value {
    font-size: 1.5rem;
    font-weight: 700;
    color: var(--color-primary);
  }

  .leaderboard-grid {
    background: white;
    border-radius: 16px;
    padding: var(--spacing-xl);
    box-shadow: 0 4px 16px rgba(0, 0, 0, 0.1);
    max-width: 600px;
    margin: 0 auto;
  }

  .leaderboard-header {
    display: grid;
    grid-template-columns: 60px 1fr 80px 80px;
    gap: var(--spacing-md);
    padding: var(--spacing-md) 0;
    border-bottom: 2px solid var(--color-primary);
    margin-bottom: var(--spacing-md);
    font-weight: 700;
    color: var(--color-primary);
    text-align: center;
  }

  .leaderboard-row {
    display: grid;
    grid-template-columns: 60px 1fr 80px 80px;
    gap: var(--spacing-md);
    padding: var(--spacing-md) 0;
    border-bottom: 1px solid #f0f0f0;
    align-items: center;
    text-align: center;
  }

  .leaderboard-row:last-child {
    border-bottom: none;
  }

  .leaderboard-row.podium {
    background: linear-gradient(135deg, #fff3e0 0%, #ffe0b2 100%);
    border-radius: 8px;
    margin-bottom: var(--spacing-xs);
  }

  .rank {
    font-size: 1.2rem;
    font-weight: 700;
  }

  .player-name {
    text-align: left;
    font-weight: 600;
  }

  .badges-count,
  .points-count {
    font-weight: 600;
    color: var(--color-primary);
  }

  .suggestions-section {
    background: linear-gradient(135deg, #f3e5f5 0%, #e1bee7 100%);
    border-radius: 16px;
    padding: var(--spacing-2xl);
  }

  .suggestion-form-container {
    max-width: 600px;
    margin: 0 auto;
    background: white;
    border-radius: 12px;
    padding: var(--spacing-xl);
    box-shadow: 0 4px 16px rgba(0, 0, 0, 0.1);
  }

  .suggestion-form {
    display: grid;
    gap: var(--spacing-md);
  }

  .form-row {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: var(--spacing-md);
  }

  .suggestion-form input,
  .suggestion-form select,
  .suggestion-form textarea {
    padding: var(--spacing-md);
    border: 2px solid #e0e0e0;
    border-radius: 8px;
    font-family: inherit;
    transition: border-color 0.3s ease;
  }

  .suggestion-form input:focus,
  .suggestion-form select:focus,
  .suggestion-form textarea:focus {
    outline: none;
    border-color: var(--color-primary);
  }

  .suggestion-form textarea {
    resize: vertical;
    min-height: 100px;
    grid-column: 1 / -1;
  }

  @media (max-width: 768px) {
    .achievements-header h1 {
      font-size: 2rem;
    }

    .categories-tabs {
      justify-content: flex-start;
      overflow-x: auto;
      padding-bottom: var(--spacing-sm);
    }

    .achievements-grid,
    .players-grid {
      grid-template-columns: 1fr;
    }

    .player-header {
      flex-direction: column;
      text-align: center;
      gap: var(--spacing-md);
    }

    .leaderboard-header,
    .leaderboard-row {
      grid-template-columns: 50px 1fr 60px 60px;
      gap: var(--spacing-sm);
    }

    .form-row {
      grid-template-columns: 1fr;
    }

    .progress-stats {
      grid-template-columns: 1fr;
    }
  }
</style>

<script>
  // Tab functionality
  document.querySelectorAll('.tab-btn').forEach(btn => {
    btn.addEventListener('click', (e) => {
      // Remove active class from all tabs
      document.querySelectorAll('.tab-btn').forEach(tab => tab.classList.remove('active'));
      
      // Add active class to clicked tab
      e.target.classList.add('active');
      
      // Filter achievements
      const category = e.target.dataset.category;
      filterAchievements(category);
    });
  });

  function filterAchievements(category) {
    const cards = document.querySelectorAll('.achievement-card');
    
    cards.forEach(card => {
      if (category === 'all' || card.dataset.category === category) {
        card.style.display = 'block';
      } else {
        card.style.display = 'none';
      }
    });
  }

  // Mark earned achievements (this would be dynamic in a real app)
  const earnedAchievements = ['first-goal', 'clean-sheet', 'captain-fantastic'];
  
  earnedAchievements.forEach(achievementId => {
    const card = document.querySelector(`[data-achievement-id="${achievementId}"]`);
    if (card) {
      card.classList.add('earned');
    }
  });

  // Handle suggestion form
  document.querySelector('.suggestion-form').addEventListener('submit', (e) => {
    e.preventDefault();
    
    const formData = new FormData(e.target);
    
    // In a real app, send to server
    console.log('Achievement suggestion submitted:', Object.fromEntries(formData));
    
    alert('Thanks for your suggestion! We\'ll review it and might add it to the game! üèÜ');
    e.target.reset();
  });

  // Initialize with all achievements visible
  filterAchievements('all');
</script>
</BaseLayout>
