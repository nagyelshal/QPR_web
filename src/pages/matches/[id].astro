---
import BaseLayout from '../../layouts/BaseLayout.astro';
import matchesData from '../../../data/matches.json';
import achievementsData from '../../../data/achievements.json';

export async function getStaticPaths() {
  return matchesData.matches.map(match => ({
    params: { id: match.id },
    props: { match }
  }));
}

const { match } = Astro.props;
const title = `Match vs ${match.opponent}`;
const description = `Detailed match information for QPR U11B vs ${match.opponent}`;

// Get the base path from the config
const base = import.meta.env.BASE_URL;
---

<BaseLayout title={title} description={description}>
  <div class="container">
    <div class="match-detail-header">
      <a href={`${base}matches/`} class="back-link">‚Üê Back to Matches</a>
      <h1>QPR U11B vs {match.opponent}</h1>
      <div class="match-meta">
        <span class="match-date">
          {new Date(match.date).toLocaleDateString('en-US', { 
            weekday: 'long',
            year: 'numeric',
            month: 'long', 
            day: 'numeric'
          })}
        </span>
        <span class="match-week">Week {match.week}</span>
      </div>
    </div>

    <div class="match-detail-grid">
      <!-- Match Info Card -->
      <div class="info-card">
        <h2>üìã Match Information</h2>
        <div class="info-grid">
          <div class="info-item">
            <span class="info-label">üèüÔ∏è Venue:</span>
            <span class="info-value">{match.location}</span>
          </div>
          <div class="info-item">
            <span class="info-label">üïê Kickoff:</span>
            <span class="info-value">{match.kickoff}</span>
          </div>
          <div class="info-item">
            <span class="info-label">üé´ Match #:</span>
            <span class="info-value">{match.match_number}</span>
          </div>
          <div class="info-item">
            <span class="info-label">‚öΩ Formation:</span>
            <span class="info-value">3-3-1</span>
          </div>
        </div>
      </div>

      <!-- Score Card -->
      <div class="score-card">
        <div class="teams-display">
          <div class="team home-team">
            <div class="team-logo">üõ°Ô∏è</div>
            <div class="team-name">QPR U11B</div>
            <div class="team-score">
              {match.result === 'pending' ? '-' : 
               match.result === 'cancelled' ? 'X' :
               match.final_score ? match.final_score.qpr : 
               match.result.includes('loss') ? match.result.split('-')[0] : '2'}
            </div>
          </div>
          <div class="vs-divider">
            <span>VS</span>
          </div>
          <div class="team away-team">
            <div class="team-logo">‚ö°</div>
            <div class="team-name">{match.opponent}</div>
            <div class="team-score">
              {match.result === 'pending' ? '-' : 
               match.result === 'cancelled' ? 'X' :
               match.final_score ? match.final_score.opponent : 
               match.result.includes('loss') ? match.result.split('-')[1].split(' ')[0] : '1'}
            </div>
          </div>
        </div>
        
        {match.result === 'pending' ? (
          <div class="match-status">
            <span class="status-badge pending">‚è≥ Upcoming</span>
          </div>
        ) : match.result === 'cancelled' ? (
          <div class="match-status">
            <span class="status-badge cancelled">‚ùå Cancelled</span>
            {match.reason && <p class="cancellation-reason">{match.reason}</p>}
          </div>
        ) : (
          <div class="match-status">
            <span class="status-badge completed">‚úÖ Final</span>
            {match.final_score && match.final_score.half_time && (
              <p class="half-time">Half-time: {match.final_score.half_time}</p>
            )}
          </div>
        )}
      </div>

      <!-- Goals & Events Card -->
      {match.result !== 'pending' && match.result !== 'cancelled' && (
        <div class="events-card">
          <h2>‚öΩ Match Events</h2>
          <div class="events-timeline">
            {match.scorers && match.scorers.length > 0 && match.scorers.map((scorer, index) => (
              <div class="event-item goal">
                <div class="event-time">{index === 0 ? '12\'' : '34\''}</div>
                <div class="event-content">
                  <span class="event-icon">‚öΩ</span>
                  <span class="event-text">
                    <strong>{scorer}</strong> scores!
                    {match.assists && match.assists[index] && ` Assist by ${match.assists[index]}`}
                  </span>
                </div>
              </div>
            ))}
            
            {match.achievements && match.achievements.length > 0 && (
              <div class="event-item achievement">
                <div class="event-time">FT</div>
                <div class="event-content">
                  <span class="event-icon">ÔøΩ</span>
                  <span class="event-text">Team Goals Achieved: {match.achievements.join(', ')}</span>
                </div>
              </div>
            )}
          </div>
        </div>
      )}

      <!-- Lineup & Performance -->
      {match.result !== 'pending' && match.result !== 'cancelled' && match.starting_lineup && (
        <div class="lineup-card">
          <h2>‚öΩ Starting Lineup ({match.formation || '3-3-1'})</h2>
          <div class="lineup-grid">
            {match.starting_lineup.map(player => (
              <div class="player-card">
                <div class="player-number">#{player.jersey}</div>
                <div class="player-info">
                  <div class="player-name">{player.name}</div>
                  <div class="player-position">{player.pos}</div>
                </div>
              </div>
            ))}
          </div>
          
          {match.captains && (
            <div class="match-roles">
              <h3>üë®‚Äç‚úàÔ∏è Match Captains</h3>
              <p><strong>1st Half:</strong> {match.captains.first_half}</p>
              <p><strong>2nd Half:</strong> {match.captains.second_half}</p>
            </div>
          )}
          
          {match.goalkeepers && (
            <div class="match-roles">
              <h3>ü•Ö Goalkeepers</h3>
              <p><strong>1st Half:</strong> {match.goalkeepers.first_half}</p>
              <p><strong>2nd Half:</strong> {match.goalkeepers.second_half}</p>
            </div>
          )}
        </div>
      )}

      <!-- Performance Highlights -->
      {match.result !== 'pending' && match.result !== 'cancelled' && (
        <div class="performance-card">
          <h2>‚≠ê Performance Highlights</h2>
          
          {match.scorers && match.scorers.length > 0 && (
            <div class="highlight-section">
              <h3>‚öΩ Goal Scorers</h3>
              <div class="performers-list">
                {match.scorers.map(scorer => (
                  <span class="performer-badge goal-scorer">{scorer}</span>
                ))}
              </div>
            </div>
          )}
          
          {match.assists && match.assists.length > 0 && (
            <div class="highlight-section">
              <h3>üéØ Assists</h3>
              <div class="performers-list">
                {match.assists.map(assist => (
                  <span class="performer-badge assist">{assist}</span>
                ))}
              </div>
            </div>
          )}
          
          {match.defensive_stars && match.defensive_stars.length > 0 && (
            <div class="highlight-section">
              <h3>üõ°Ô∏è Defensive Stars</h3>
              <div class="performers-list">
                {match.defensive_stars.map(defender => (
                  <span class="performer-badge defensive">{defender}</span>
                ))}
              </div>
            </div>
          )}
        </div>
      )}

      <!-- Team Achievements -->
      {match.result !== 'pending' && match.result !== 'cancelled' && match.achievements && match.achievements.length > 0 && (
        <div class="achievements-card">
          <h2>üèÜ Team Goals Achieved</h2>
          <div class="achievements-grid">
            {match.achievements.map(achievement => (
              <div class="achievement-earned">
                <span class="achievement-icon">
                  {achievement.includes('First Goal') ? '‚öΩ' : 
                   achievement.includes('Team Work') ? 'ü§ù' : 'üèÜ'}
                </span>
                <div class="achievement-info">
                  <h4>{achievement}</h4>
                  <p>
                    {achievement.includes('First Goal') ? 'Team scored their first goal of the season!' :
                     achievement.includes('Team Work') ? 'Excellent teamwork and collaboration demonstrated!' :
                     'Team achievement unlocked!'}
                  </p>
                </div>
              </div>
            ))}
          </div>
        </div>
      )}

    </div>
  </div>
</BaseLayout>

<style>
  .match-detail-header {
    text-align: center;
    margin-bottom: var(--spacing-2xl);
  }

  .back-link {
    display: inline-block;
    margin-bottom: var(--spacing-md);
    color: var(--color-primary);
    text-decoration: none;
    font-weight: 600;
    transition: color 0.3s ease;
  }

  .back-link:hover {
    color: #1565c0;
  }

  .match-detail-header h1 {
    font-size: 2.5rem;
    color: var(--color-text);
    margin-bottom: var(--spacing-md);
  }

  .match-meta {
    display: flex;
    justify-content: center;
    gap: var(--spacing-lg);
    align-items: center;
  }

  .match-date {
    font-size: 1.1rem;
    color: var(--color-text-light);
  }

  .match-week {
    background: var(--color-primary);
    color: white;
    padding: var(--spacing-xs) var(--spacing-md);
    border-radius: 20px;
    font-weight: 600;
  }

  .match-detail-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(350px, 1fr));
    gap: var(--spacing-lg);
  }

  .info-card,
  .score-card,
  .events-card,
  .potm-card,
  .celebrations-card,
  .achievements-card,
  .stats-card {
    background: white;
    border-radius: 16px;
    padding: var(--spacing-xl);
    box-shadow: 0 4px 16px rgba(0, 0, 0, 0.1);
    transition: transform 0.3s ease;
  }

  .info-card:hover,
  .score-card:hover,
  .events-card:hover,
  .potm-card:hover,
  .celebrations-card:hover,
  .achievements-card:hover,
  .stats-card:hover {
    transform: translateY(-4px);
  }

  .info-card h2,
  .events-card h2,
  .potm-card h2,
  .celebrations-card h2,
  .achievements-card h2,
  .stats-card h2 {
    color: var(--color-primary);
    margin-bottom: var(--spacing-lg);
    font-size: 1.3rem;
  }

  .info-grid {
    display: grid;
    gap: var(--spacing-md);
  }

  .info-item {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: var(--spacing-sm) 0;
    border-bottom: 1px solid #f0f0f0;
  }

  .info-item:last-child {
    border-bottom: none;
  }

  .info-label {
    font-weight: 600;
    color: var(--color-text-light);
  }

  .info-value {
    font-weight: 500;
  }

  .score-card {
    grid-column: span 2;
  }

  .teams-display {
    display: flex;
    align-items: center;
    justify-content: space-between;
    margin-bottom: var(--spacing-lg);
  }

  .team {
    text-align: center;
    flex: 1;
  }

  .team-logo {
    font-size: 3rem;
    margin-bottom: var(--spacing-sm);
  }

  .team-name {
    font-weight: 700;
    font-size: 1.2rem;
    margin-bottom: var(--spacing-sm);
  }

  .team-score {
    font-size: 4rem;
    font-weight: 900;
    color: var(--color-primary);
  }

  .vs-divider {
    margin: 0 var(--spacing-lg);
    font-weight: 700;
    color: var(--color-text-light);
    font-size: 1.5rem;
  }

  .match-status {
    text-align: center;
  }

  .status-badge {
    padding: var(--spacing-sm) var(--spacing-lg);
    border-radius: 20px;
    font-weight: 600;
    font-size: 1rem;
  }

  .status-badge.pending {
    background: #fff3e0;
    color: #e65100;
  }

  .status-badge.completed {
    background: #e8f5e8;
    color: #2e7d32;
  }

  .events-timeline {
    display: grid;
    gap: var(--spacing-md);
  }

  .event-item {
    display: flex;
    align-items: center;
    gap: var(--spacing-md);
    padding: var(--spacing-md);
    border-radius: 8px;
    border-left: 4px solid;
  }

  .event-item.goal {
    background: #e8f5e8;
    border-left-color: #4caf50;
  }

  .event-item.opponent-goal {
    background: #ffebee;
    border-left-color: #f44336;
  }

  .event-item.celebration {
    background: #f3e5f5;
    border-left-color: #9c27b0;
  }

  .event-time {
    font-weight: 700;
    font-size: 1.1rem;
    color: var(--color-primary);
    min-width: 40px;
  }

  .event-content {
    display: flex;
    align-items: center;
    gap: var(--spacing-sm);
  }

  .event-icon {
    font-size: 1.2rem;
  }

  .player-voting-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
    gap: var(--spacing-sm);
    margin-bottom: var(--spacing-lg);
  }

  .player-vote-option {
    background: #f8f9fa;
    border: 2px solid #e0e0e0;
    border-radius: 8px;
    padding: var(--spacing-md);
    text-align: center;
    cursor: pointer;
    transition: all 0.3s ease;
    font-weight: 500;
  }

  .player-vote-option:hover {
    background: #e3f2fd;
    border-color: var(--color-primary);
  }

  .player-vote-option.selected {
    background: var(--color-primary);
    color: white;
    border-color: var(--color-primary);
  }

  .potm-winner {
    text-align: center;
  }

  .winner-display {
    display: flex;
    align-items: center;
    gap: var(--spacing-lg);
    margin-bottom: var(--spacing-lg);
    background: linear-gradient(135deg, #fff3e0 0%, #ffe0b2 100%);
    padding: var(--spacing-lg);
    border-radius: 12px;
  }

  .winner-avatar {
    font-size: 4rem;
  }

  .winner-info h3 {
    font-size: 1.5rem;
    margin: 0 0 var(--spacing-xs) 0;
    color: #e65100;
  }

  .winner-info p {
    margin: 0;
    color: #e65100;
    opacity: 0.8;
  }

  .achievement-earned {
    background: linear-gradient(135deg, #e8f5e8 0%, #c8e6c9 100%);
    padding: var(--spacing-md);
    border-radius: 8px;
    text-align: center;
  }

  .achievement-badge {
    font-weight: 600;
    color: #2e7d32;
  }

  .celebrations-showcase {
    display: grid;
    gap: var(--spacing-lg);
    margin-bottom: var(--spacing-xl);
  }

  .celebration-highlight {
    background: #f3e5f5;
    padding: var(--spacing-lg);
    border-radius: 12px;
  }

  .celebration-highlight h3 {
    color: var(--color-primary);
    margin-bottom: var(--spacing-sm);
  }

  .celebration-highlight p {
    margin-bottom: var(--spacing-md);
  }

  .celebration-votes {
    display: flex;
    justify-content: space-between;
    align-items: center;
  }

  .vote-btn {
    background: var(--color-primary);
    color: white;
    border: none;
    padding: var(--spacing-sm) var(--spacing-md);
    border-radius: 6px;
    cursor: pointer;
    font-weight: 600;
    transition: background 0.3s ease;
  }

  .vote-btn:hover {
    background: #1565c0;
  }

  .vote-count {
    font-weight: 600;
    color: var(--color-primary);
  }

  .submit-celebration {
    background: #f8f9fa;
    padding: var(--spacing-lg);
    border-radius: 12px;
  }

  .submit-celebration h4 {
    margin-bottom: var(--spacing-md);
    color: var(--color-primary);
  }

  .celebration-form {
    display: grid;
    gap: var(--spacing-md);
  }

  .celebration-form input,
  .celebration-form textarea {
    padding: var(--spacing-md);
    border: 2px solid #e0e0e0;
    border-radius: 6px;
    font-family: inherit;
  }

  .celebration-form input:focus,
  .celebration-form textarea:focus {
    outline: none;
    border-color: var(--color-primary);
  }

  .lineup-card, .performance-card {
    background: white;
    border-radius: 16px;
    padding: var(--spacing-xl);
    box-shadow: 0 4px 16px rgba(0, 0, 0, 0.1);
    transition: transform 0.3s ease;
  }

  .lineup-card:hover, .performance-card:hover {
    transform: translateY(-4px);
  }

  .lineup-card h2, .performance-card h2 {
    color: var(--color-primary);
    margin-bottom: var(--spacing-lg);
    font-size: 1.3rem;
  }

  .lineup-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
    gap: var(--spacing-lg);
    margin-top: var(--spacing-lg);
  }

  .position-group h4 {
    color: var(--color-primary);
    margin-bottom: var(--spacing-sm);
    font-size: 1rem;
    font-weight: 600;
  }

  .player-list {
    list-style: none;
    padding: 0;
    margin: 0;
  }

  .player-list li {
    padding: var(--spacing-sm);
    background: #f8f9fa;
    margin-bottom: 0.25rem;
    border-radius: 6px;
    border-left: 3px solid var(--color-primary);
    font-weight: 500;
  }

  .captain-indicator {
    color: #FFD700;
    font-weight: 700;
  }

  .performance-highlights {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
    gap: var(--spacing-lg);
    margin-top: var(--spacing-lg);
  }

  .highlight-section {
    padding: var(--spacing-lg);
    background: #f8f9fa;
    border-radius: 8px;
    border-left: 4px solid var(--color-primary);
  }

  .highlight-section h4 {
    color: var(--color-primary);
    margin-bottom: var(--spacing-sm);
    font-size: 1rem;
    font-weight: 600;
  }

  .performer-badge {
    display: inline-block;
    background: var(--color-primary);
    color: white;
    padding: 0.25rem var(--spacing-sm);
    border-radius: 12px;
    font-size: 0.8rem;
    margin: 0.25rem 0.25rem 0.25rem 0;
    font-weight: 600;
  }

  .achievements-grid {
    display: grid;
    gap: var(--spacing-md);
  }

  .achievement-earned {
    display: flex;
    align-items: center;
    gap: var(--spacing-md);
    background: linear-gradient(135deg, #e8f5e8 0%, #c8e6c9 100%);
    padding: var(--spacing-md);
    border-radius: 8px;
  }

  .achievement-icon {
    font-size: 2rem;
  }

  .achievement-info h4 {
    margin: 0 0 var(--spacing-xs) 0;
    color: #2e7d32;
  }

  .achievement-info p {
    margin: 0;
    color: #2e7d32;
    opacity: 0.8;
  }

  .stats-grid {
    display: grid;
    gap: var(--spacing-md);
  }

  .stat-item {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: var(--spacing-sm) 0;
    border-bottom: 1px solid #f0f0f0;
  }

  .stat-item:last-child {
    border-bottom: none;
  }

  .stat-label {
    font-weight: 600;
    color: var(--color-text-light);
  }

  .stat-value {
    font-weight: 700;
    font-size: 1.1rem;
    color: var(--color-primary);
  }

  @media (max-width: 768px) {
    .match-detail-header h1 {
      font-size: 1.8rem;
    }

    .match-meta {
      flex-direction: column;
      gap: var(--spacing-sm);
    }

    .match-detail-grid {
      grid-template-columns: 1fr;
    }

    .score-card {
      grid-column: span 1;
    }

    .teams-display {
      flex-direction: column;
      gap: var(--spacing-lg);
    }

    .vs-divider {
      transform: rotate(90deg);
      margin: var(--spacing-sm) 0;
    }

    .winner-display {
      flex-direction: column;
      text-align: center;
    }

    .player-voting-grid {
      grid-template-columns: 1fr;
    }
  }
</style>

<script>
  // Mock roster data for voting
  const rosterPlayers = [
    'Adam K', 'Alexander V', 'David A', 'Ethan G', 'Eunjun P', 
    'Minh-An D', 'Owen H', 'Rafael H', 'Romeo M'
  ];

  // Initialize voting grid
  const votingGrid = document.getElementById('voting-grid');
  const voteSubmit = document.getElementById('vote-submit');
  let selectedPlayer = null;

  if (votingGrid && voteSubmit) {
    rosterPlayers.forEach(player => {
      const option = document.createElement('div');
      option.className = 'player-vote-option';
      option.textContent = player;
      option.dataset.player = player;
      option.addEventListener('click', selectPlayer);
      votingGrid.appendChild(option);
    });

    function selectPlayer(e) {
      // Remove previous selection
      document.querySelectorAll('.player-vote-option').forEach(option => {
        option.classList.remove('selected');
      });
      
      // Select current player
      e.target.classList.add('selected');
      selectedPlayer = e.target.dataset.player;
      voteSubmit.disabled = false;
      voteSubmit.textContent = `Vote for ${selectedPlayer}`;
    }

    voteSubmit.addEventListener('click', () => {
      if (selectedPlayer) {
        // In a real app, send vote to server
        console.log('Voting for:', selectedPlayer);
        
        // Show success
        voteSubmit.textContent = 'Vote Submitted! ‚úÖ';
        voteSubmit.disabled = true;
        voteSubmit.style.background = '#4caf50';
        
        // Disable all voting options
        document.querySelectorAll('.player-vote-option').forEach(option => {
          option.style.opacity = '0.6';
          option.style.cursor = 'not-allowed';
          option.removeEventListener('click', selectPlayer);
        });
      }
    });
  }

  // Handle celebration voting
  document.querySelectorAll('.vote-btn').forEach(btn => {
    btn.addEventListener('click', (e) => {
      const voteCountSpan = e.target.parentElement.querySelector('.vote-count');
      const currentVotes = parseInt(voteCountSpan.textContent.split(' ')[0]);
      
      // Update vote count
      voteCountSpan.textContent = `${currentVotes + 1} votes`;
      
      // Disable button
      e.target.textContent = 'Voted! ‚úÖ';
      e.target.disabled = true;
      e.target.style.background = '#4caf50';
    });
  });

  // Handle celebration form submission
  document.querySelector('.celebration-form')?.addEventListener('submit', (e) => {
    e.preventDefault();
    
    const formData = new FormData(e.target);
    const name = formData.get('name') || e.target.querySelector('input').value;
    const description = formData.get('description') || e.target.querySelector('textarea').value;
    
    if (name && description) {
      alert('Celebration idea submitted! Thanks for your creativity! üéâ');
      e.target.reset();
    }
  });
</script>
</BaseLayout>
